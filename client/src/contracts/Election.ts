/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewVote = ContractEventLog<{
  voter: string;
  id: string;
  voteCount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Election extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Election;
  clone(): Election;
  methods: {
    candidates(arg0: number | string | BN): NonPayableTransactionObject<{
      name: string;
      voteCount: string;
      0: string;
      1: string;
    }>;

    candidatesCount(): NonPayableTransactionObject<string>;

    voters(arg0: string): NonPayableTransactionObject<boolean>;

    vote(_candidate: number | string | BN): NonPayableTransactionObject<void>;

    winningCandidate(): NonPayableTransactionObject<string>;

    winnerName(): NonPayableTransactionObject<string>;
  };
  events: {
    NewVote(cb?: Callback<NewVote>): EventEmitter;
    NewVote(options?: EventOptions, cb?: Callback<NewVote>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewVote", cb: Callback<NewVote>): void;
  once(event: "NewVote", options: EventOptions, cb: Callback<NewVote>): void;
}
