{"version":3,"sources":["connectWallet.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["connectWallet","networkChangeCallback","a","ethWindow","window","ethereum","send","on","Web3","web3","console","log","provider","providers","HttpProvider","App","props","listenForEvents","election","state","events","NewVote","error","event","toast","JSON","stringify","type","eventData","returnValues","setState","candidates","map","candidate","id","toastVote","voter","name","voteCount","to","selfVoted","address","toastId","connectContract","networkId","deployedNetwork","Election","networks","undefined","process","eth","getAccounts","accounts","Contract","abi","fetchCandidates","connect","net","getId","methods","candidatesCount","call","count","i","push","vote","voters","from","message","this","className","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"unuMA2BeA,EAvBG,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,2DACbC,EAAYC,QAMJC,SAPK,gCAQXF,EAAUE,SAASC,KAAK,uBARb,cASbL,GACFE,EAAUE,SAASE,GAAG,iBAAkBN,GAVzB,kBAYV,IAAIO,IAAKL,EAAUE,WAZT,WAaRF,EAAUM,KAbF,wBAcjBC,QAAQC,IAAI,2BAdK,kBAeVR,EAAUM,MAfA,eAiBXG,EAAW,IAAIJ,IAAKK,UAAUC,aAAa,yBACjDJ,QAAQC,IAAI,gDAlBK,kBAmBV,IAAIH,IAAKI,IAnBC,4CAAH,sD,kCC6LHG,E,kDAxKb,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IASRC,gBAV0B,sBAUI,4BAAAf,EAAA,uDACtBgB,EAAW,EAAKC,MAAMD,WAE1BA,EAASE,OAAOC,QAAQ,IAAI,SAACC,EAAOC,GAClC,GAAID,EACFE,YAAMC,KAAKC,UAAUJ,GAAQ,CAAEK,KAAM,cADvC,CAIA,IAAMC,EAAYL,EAAMM,aACxB,EAAKC,UAAS,SAACX,GACb,IAAMY,EAAaZ,EAAMY,WACzB,OAAIA,EACK,CACLA,WAAYA,EAAWC,KAAI,SAACC,GAC1B,OAAIA,EAAUC,MAAQN,EAAUM,IAC9B,EAAKC,UAAUP,EAAUQ,MAAOH,EAAUI,MACnC,2BACFJ,GADL,IAEEK,UAAWL,EAAUK,UAAY,KAG9BL,MAINd,SAzBe,2CAVJ,EAyC1BgB,UAAiD,SAACC,EAAOG,GACvD,IAAMC,EAAYJ,IAAU,EAAKjB,MAAMsB,QACvCjB,YAAM,GAAD,OAAIgB,EAAY,MAAQJ,EAAxB,0BAA+CG,GAAM,CACxDZ,KAAMa,EAAY,UAAY,UAC9BE,QAAQ,GAAD,OAAKN,EAAL,aAAeG,MA7CA,EAiD1BI,gBAjD0B,uCAiDR,WAAOC,GAAP,qBAAA1C,EAAA,2DACRO,EAAS,EAAKU,MAAdV,MADQ,oBAGRoC,EACJC,EAASC,SAAT,UACKH,IALO,uBASZ,EAAKd,SAAS,CACZZ,cAAU8B,EACVjB,gBAAYiB,EACZP,aAASO,KAEIC,EACfzB,YAAM,6BAAD,OAC0D,GAD1D,KAEH,CAAEG,KAAM,UAjBE,2CAsBSlB,EAAKyC,IAAIC,cAtBlB,QAsBRC,EAtBQ,OAwBRlC,EAAW,IAAIT,EAAKyC,IAAIG,SAC5BP,EAASQ,IACTT,GAAmBA,EAAgBJ,SAGrCjB,YAAM,oBAAqB,CAAEG,KAAM,YACnC,EAAKG,SAAS,CAAEZ,WAAUuB,QAASW,EAAS,KAAM,WAChD,EAAKnC,kBACL,EAAKsC,qBAhCO,4CAjDQ,wDAsF1BC,QAtF0B,sBAsFJ,8BAAAtD,EAAA,sEACDF,EAAc,EAAK2C,iBADlB,cACdlC,EADc,gBAEIA,EAAKyC,IAAIO,IAAIC,QAFjB,OAEdd,EAFc,OAGpB,EAAKd,SAAS,CAAErB,SAAQ,kBAAM,EAAKkC,gBAAgBC,MAH/B,2CAtFI,EA4F1BW,gBA5F0B,sBA4FI,oCAAArD,EAAA,2DACtBgB,EAAW,EAAKC,MAAMD,UADA,iCAGNA,EAASyC,QAAQC,kBAAkBC,OAH7B,OAGpBC,EAHoB,OAIpB/B,EAA0B,GACvBgC,EAAI,EALa,YAKVA,GAAKD,GALK,kCAMA5C,EAASyC,QAAQ5B,WAAWgC,GAAGF,OAN/B,QAMlB5B,EANkB,OAOxBF,EAAWiC,KAAK,CACd3B,KAAMJ,EAAUI,KAChBC,WAAYL,EAAUK,UACtBJ,GAAI6B,IAVkB,QAKEA,IALF,uBAa1B,EAAKjC,SAAS,CAAEC,eAbU,4CA5FJ,EA6G1BkC,KA7G0B,uCA6GY,WAAO/B,GAAP,mBAAAhC,EAAA,2DACN,EAAKiB,MAA3BD,EAD4B,EAC5BA,SAAUuB,EADkB,EAClBA,QADkB,SAG7BA,EAH6B,uBAIhCjB,YAAM,aAAc,CAAEG,KAAM,UAJI,iDAOXT,QAPW,IAOXA,OAPW,EAOXA,EAAUyC,QAAQO,OAAOzB,GAASoB,OAPvB,0CAShCrC,YAAM,iBAAkB,CAAEG,KAAM,UATA,mDAY5BT,QAZ4B,IAY5BA,OAZ4B,EAY5BA,EAAUyC,QAAQM,KAAK/B,GAAI5B,KAAK,CAAE6D,KAAM1B,IAZZ,QAalCjB,YAAM,2CAA4C,CAAEG,KAAM,UAbxB,kDAelCH,YAAM,KAAM4C,QAAS,CAAEzC,KAAM,UAfK,0DA7GZ,sDAExB,EAAKR,MAAQ,CACXV,UAAMuC,EACN9B,cAAU8B,EACVjB,gBAAYiB,EACZP,aAASO,GANa,E,0CAgI1B,WAAU,IAAD,SACyBqB,KAAKlD,MAA7BY,EADD,EACCA,WAAYU,EADb,EACaA,QAEpB,OACE,qCACE,cAAC,IAAD,IACA,qBAAK6B,UAAU,MAAf,SACG7B,EACC,sBAAK6B,UAAU,YAAf,UACE,8BACE,oBAAGA,UAAU,SAAb,UACG7B,EACD,uBACA,uBACA,4DAGJ,qBAAK6B,UAAU,aAAf,SACGvC,EACGA,EAAWC,KAAI,SAACC,GAAD,OACb,qBACEqC,UAAU,YACVC,QAAS,kBAAM,EAAKN,KAAKhC,EAAUC,KAFrC,mBAIKD,EAAUI,KAJf,aAIwBJ,EAAUK,YAD3BL,EAAUC,OAGnB,kBAIR,wBAAQoC,UAAU,iBAAiBC,QAASF,KAAKb,QAAjD,qC,GA/JMgB,aCVHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92f6af2e.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst connectWallet: (\n  networkChangeCallback?: (networkId: number | string) => void\n) => Promise<Web3> = async (networkChangeCallback) => {\n  const ethWindow = window as Window &\n    typeof globalThis & {\n      ethereum: any;\n      web3?: Web3;\n    };\n\n  if (ethWindow.ethereum) {\n    await ethWindow.ethereum.send(\"eth_requestAccounts\");\n    if (networkChangeCallback) {\n      ethWindow.ethereum.on(\"networkChanged\", networkChangeCallback);\n    }\n    return new Web3(ethWindow.ethereum);\n  } else if (ethWindow.web3) {\n    console.log(\"Injected web3 detected.\");\n    return ethWindow.web3;\n  } else {\n    const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n    console.log(\"No web3 instance injected, using Local web3.\");\n    return new Web3(provider);\n  }\n};\n\nexport default connectWallet;\n","import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport Election from \"./contracts/Election.json\";\nimport connectWallet from \"./connectWallet\";\nimport \"./App.css\";\nimport { AbiItem } from \"web3-utils\";\nimport { Election as IElection } from \"./contracts/Election\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\ninterface Candidate {\n  name: string;\n  voteCount: number;\n  id: number;\n}\n\ninterface Props {}\ninterface State {\n  web3?: Web3;\n  election?: IElection;\n  candidates?: Candidate[];\n  address?: string;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      web3: undefined,\n      election: undefined,\n      candidates: undefined,\n      address: undefined,\n    };\n  }\n\n  listenForEvents: () => void = async () => {\n    const election = this.state.election;\n    if (election) {\n      election.events.NewVote({}, (error, event) => {\n        if (error) {\n          toast(JSON.stringify(error), { type: \"error\" });\n          return;\n        }\n        const eventData = event.returnValues;\n        this.setState((state) => {\n          const candidates = state.candidates;\n          if (candidates) {\n            return {\n              candidates: candidates.map((candidate) => {\n                if (candidate.id === +eventData.id) {\n                  this.toastVote(eventData.voter, candidate.name);\n                  return {\n                    ...candidate,\n                    voteCount: candidate.voteCount + 1,\n                  };\n                }\n                return candidate;\n              }),\n            };\n          }\n          return state;\n        });\n      });\n    }\n  };\n\n  toastVote: (voter: string, to: string) => void = (voter, to) => {\n    const selfVoted = voter === this.state.address;\n    toast(`${selfVoted ? \"You\" : voter} just voted to ${to}`, {\n      type: selfVoted ? \"success\" : \"default\",\n      toastId: `${voter}to${to}`,\n    });\n  };\n\n  connectContract = async (networkId: string | number) => {\n    const { web3 } = this.state;\n    if (web3) {\n      const deployedNetwork =\n        Election.networks[\n          `${networkId}` as unknown as keyof typeof Election.networks\n        ];\n\n      if (!deployedNetwork) {\n        this.setState({\n          election: undefined,\n          candidates: undefined,\n          address: undefined,\n        });\n        const isProd = process.env.NODE_ENV === \"production\";\n        toast(\n          `Connect to ropsten testnet${!isProd ? \" or local network\" : \"\"}.`,\n          { type: \"error\" }\n        );\n        return;\n      }\n\n      const accounts = await web3.eth.getAccounts();\n\n      const election = new web3.eth.Contract(\n        Election.abi as AbiItem[],\n        deployedNetwork && deployedNetwork.address\n      ) as unknown as IElection;\n\n      toast(\"Wallet connected.\", { type: \"success\" });\n      this.setState({ election, address: accounts[0] }, () => {\n        this.listenForEvents();\n        this.fetchCandidates();\n      });\n    }\n  };\n\n  connect: () => void = async () => {\n    const web3 = await connectWallet(this.connectContract);\n    const networkId = await web3.eth.net.getId();\n    this.setState({ web3 }, () => this.connectContract(networkId));\n  };\n\n  fetchCandidates: () => void = async () => {\n    const election = this.state.election;\n    if (election) {\n      const count = await election.methods.candidatesCount().call();\n      const candidates: Candidate[] = [];\n      for (let i = 0; i < +count; i++) {\n        const candidate = await election.methods.candidates(i).call();\n        candidates.push({\n          name: candidate.name,\n          voteCount: +candidate.voteCount,\n          id: i,\n        });\n      }\n      this.setState({ candidates });\n    }\n  };\n\n  vote: (id: number) => Promise<void> = async (id: number) => {\n    const { election, address } = this.state;\n    try {\n      if (!address) {\n        toast(\"No address\", { type: \"error\" });\n        return;\n      }\n      const hasVoted = await election?.methods.voters(address).call();\n      if (hasVoted) {\n        toast(\"Already voted!\", { type: \"error\" });\n        return;\n      }\n      await election?.methods.vote(id).send({ from: address });\n      toast(\"Vote sent, wait for block confirmations.\", { type: \"error\" });\n    } catch (error: any) {\n      toast(error.message, { type: \"error\" });\n    }\n  };\n\n  render() {\n    const { candidates, address } = this.state;\n\n    return (\n      <>\n        <ToastContainer />\n        <div className=\"app\">\n          {address ? (\n            <div className=\"container\">\n              <div>\n                <p className=\"detail\">\n                  {address}\n                  <br />\n                  <br />\n                  <span>Choose one to vote:</span>\n                </p>\n              </div>\n              <div className=\"candidates\">\n                {candidates\n                  ? candidates.map((candidate) => (\n                      <div\n                        className=\"candidate\"\n                        onClick={() => this.vote(candidate.id)}\n                        key={candidate.id}\n                      >{`${candidate.name}: ${candidate.voteCount}`}</div>\n                    ))\n                  : \"Loading...\"}\n              </div>\n            </div>\n          ) : (\n            <button className=\"connect-button\" onClick={this.connect}>\n              Connect Wallet\n            </button>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}